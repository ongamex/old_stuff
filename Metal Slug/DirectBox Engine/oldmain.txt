#define WIN32_LEAD_AND_MEAN

#include <windows.h>
#include <windowsx.h>
#include <iostream>
#include <string>
#include <sstream>
#include <d3d9.h>
#include <d3dx9.h>
#include <XAnimator_lib.h>

//Engine 
#include "DBOXApp.h"
#include "DBOX3D.h"
#include "DBOXCameraTP.h"
#include "DBOXFont.h"
#include "DBOXInput.h"
#include "DBOXUI.h"

using namespace std;

//global WindowInfo
long WindowWidth	= 1024l;
long WindowHeight	= 860l;
bool Windowed		= true;
float TimeDelta = 0 ,StartTime = 0 ,EndTime = 0; 

IXAnimator* XAnimator = NULL;
LPD3DXMESH LandB;
int HeroID = 0 , LandID = 1 , SkyID = 2;

int WINAPI WinMain(HINSTANCE hInstance ,HINSTANCE ,LPSTR ,int )
{

	LPDBOXAPP Application = DBOXCreateApp(hInstance);
	Application->CreateWindowApp("DBOX v0.01" , WindowWidth , WindowHeight , !Windowed);

	LPDBOX3D Engine3D = DBOXCreate3D();
	DBOXSetPresentParameters(Application->GetWindowHandle() , WindowWidth , WindowHeight , D3DFMT_A8R8G8B8 , Windowed);
	Engine3D->CreateDevice(DBOXSetPresentParameters(Application->GetWindowHandle() , WindowWidth , WindowHeight , D3DFMT_A8R8G8B8 , Windowed));
	Engine3D->GetDevice()->SetRenderState(D3DRS_CULLMODE , D3DCULL_NONE);

	Engine3D->GetDevice()->SetSamplerState(0, D3DSAMP_MAGFILTER, D3DTEXF_ANISOTROPIC);
	Engine3D->GetDevice()->SetSamplerState(0, D3DSAMP_MINFILTER, D3DTEXF_ANISOTROPIC);
	Engine3D->GetDevice()->SetSamplerState(0, D3DSAMP_MIPFILTER, D3DTEXF_ANISOTROPIC);
	
	LPDBOXCAMERATP Camera = DBOXCreateSimpleCameraTP(Engine3D->GetDevice() , D3DXVECTOR3(0.0f , 14.0f , 0.0f) , 170.0f);
	Camera->Pitch(DBOXToRadian(-25.0f));

	LPDBOXFONT Font = DBOXCreateFont("Arial" , Engine3D->GetDevice() ,9 , 16 , 800 , 0xff00aaff);
	LPDBOXINPUT Input = DBOXCreateInput(Application->GetWindowHandle());

	LPDBOXUI UIController = DBOXCreateUI(Engine3D->GetSprite() , Application->GetWindowHandle());

	LPDIRECT3DTEXTURE9 Texture1 = Engine3D->CreateTextureFromFile("Textures\\Button.bmp" , 256 , 256 , 0xffff00ff);
	LPDIRECT3DTEXTURE9 Texture2 = Engine3D->CreateTextureFromFile("Textures\\Bar.bmp" , 512 , 128 , 0xffff00ff);
	LPDIRECT3DTEXTURE9 Texture3 = Engine3D->CreateTextureFromFile("Textures\\Slider.bmp" , 512 , 128 , 0xffff00ff);
	LPDIRECT3DTEXTURE9 Texture4 = Engine3D->CreateTextureFromFile("Textures\\check.bmp" , 256 , 256 , 0xffff00ff);

	DBOXUIButton Button;
	RECT Rc[3] = {{0,0,199,59} ,{0 , 60 , 199 , 119} , {0 , 120 , 199 , 179}};
	Button.Create(UIController , Texture1 , Rc);
	Button.SetPos(0,WindowHeight-60);
	Button.SetHotkey(VK_ESCAPE);
	
	DBOXUIProgressBar Bar1;
	RECT BarRc[] = {{0,0 , 0 ,0} , {0,0 , 400 , 50}};
	Bar1.Create(UIController , Texture2 , BarRc);
	Bar1.SetProgress(0.00f);

	DBOXUISlider Slider1;
	RECT SliderRc[] = {{0,0 , 302 , 50} , {0,50 , 51 , 99} };
	Slider1.Create(UIController , Texture3 , SliderRc , 20);
	Slider1.SetPos(260, WindowHeight-50);
	Slider1.SetVal(0.0f);

	DBOXUICheckbox Check;
	RECT CheckRc[] = {{0,0, 200,45} , {0,45 , 200,88} , {0,90 , 200,137}};
	Check.Create(UIController , Texture4 , CheckRc);
	Check.SetPos(0, 660);
	Check.SetState(DBOXUI_CHECKED);

	XAnimator = CreateXAnimator(Engine3D->GetDevice()  , 1);
	XAnimator->LoadXFile("Mesh\\mesh.X" , &HeroID);
	XAnimator->LoadXFile("Mesh\\land.X" , &LandID);
	XAnimator->LoadXFile("Mesh\\sky_2.X" , &SkyID);
	XAnimator->ChangeAnimationSet( HeroID , 1);

	D3DLIGHT9 Dir;
	ZeroMemory(&Dir , sizeof(Dir));
	Dir.Direction = D3DXVECTOR3(1 , -0.3f , 1);
	Dir.Diffuse = D3DXCOLOR(1.0f , 1.0f , 1.0f ,1.0f);
	Dir.Ambient = D3DXCOLOR(1.0f , 1.0f , 1.0f ,1.0f)*0.3f;
	Dir.Specular = D3DXCOLOR(1.0f , 1.0f , 1.0f ,1.0f)*0.6f;
	Dir.Type = D3DLIGHT_DIRECTIONAL;
	D3DMATERIAL9 Mtrl;
	ZeroMemory(&Mtrl , sizeof(Mtrl));
	Mtrl.Diffuse = D3DXCOLOR(0.8f , 0.8f , 0.8f ,1.0f);
	Mtrl.Ambient = D3DXCOLOR(0.1f , 0.1f , 0.1f ,1.0f);;

	Mtrl.Power = 0.5f;

	Engine3D->GetDevice()->SetRenderState(D3DRS_LIGHTING , 1);
	Engine3D->GetDevice()->SetRenderState(D3DRS_AMBIENT, D3DCOLOR_XRGB(50, 50, 50));    

	D3DXVECTOR3 Look(0,0,1.0f);
	D3DXVECTOR3 Pos(0,0,0) , OldPos;
	OldPos = Pos;
	D3DXMATRIX Transf,Rot,Transl;
	float RotationY = 0;
	D3DXMatrixIdentity(&Transl);
	D3DXMatrixIdentity(&Rot);
	int AS = 1;
	Camera->SetAutoTarget(&Pos);
	XAnimator->ChangeAnimationSet(HeroID , 1);
	while(Application->ProcessMessage() != WM_QUIT)
	{
		Engine3D->BeginScene(0xFF000000);
		Input->UpdateDevices();
		UIController->Update();
		
		Camera->SkyRenderMode(Engine3D->GetDevice());
		Engine3D->GetDevice()->SetRenderState(D3DRS_CULLMODE , D3DCULL_CW);
		XAnimator->Render(SkyID , DBOXMatIdent , 0.0f);
		Engine3D->GetDevice()->SetRenderState(D3DRS_CULLMODE , D3DCULL_CCW);
		Camera->Capture(Engine3D->GetDevice());
		
		XAnimator->Render(LandID , DBOXMatIdent , 0.0f);

		Engine3D->GetDevice()->SetLight(0 , &Dir);
		Engine3D->GetDevice()->LightEnable(0 , 1);
		Engine3D->GetDevice()->SetMaterial(&Mtrl);

		OldPos = Pos;
		if(Input->IsKeyDown(DIK_W))
		{
			Pos+=Look*16.0f*0.09f;
			if(AS != 1) XAnimator->SetAnimationFrame(HeroID , 0);
			XAnimator->ChangeAnimationSet(HeroID , 1);	
			XAnimator->GetNumberOfFramesInCurrentAnimationSet(HeroID);
			AS = 1;
		}
		if(OldPos == Pos)
		{
			if(AS != 2) XAnimator->SetAnimationFrame(HeroID , 0);
			XAnimator->ChangeAnimationSet(HeroID , 2);	
			AS = 2;
		}
		if(XAnimator->GetNumberOfFramesInCurrentAnimationSet(HeroID) == XAnimator->GetCurrentAnimationFrame(HeroID) + 1)
			XAnimator->SetAnimationFrame(HeroID , 0);

		if(Input->IsKeyDown(DIK_A))RotationY -= 0.03f;
		if(Input->IsKeyDown(DIK_D))RotationY += 0.03f;
			
		if(WIN_KEY_DOWN(VK_RBUTTON)&&WIN_KEY_DOWN(VK_LBUTTON))
			RotationY = D3DX_PI + Camera->GetYaw();
		

		D3DXMatrixRotationY(&Rot , RotationY);
		D3DXVec3TransformCoord(&Look , &D3DXVECTOR3(0,0,1.0f) , &Rot);
		D3DXMatrixTranslation(&Transl , Pos.x , Pos.y , Pos.z);
		//draw HERO
		XAnimator->Render(HeroID , Rot*Transl , 0.09f);


		D3DXVECTOR3 Vect = Input->GetMouseMoveVector();
		Camera->SetRadius(Camera->GetRadius() - Vect.z/80.f);
		if(WIN_KEY_DOWN(VK_RBUTTON) && UIController->IsApplicationActive())
		{Camera->Yaw(Vect.x*0.002f);Camera->Pitch(-Vect.y*0.002f);}

		
		//UpdateUI
		Button.Update();
		Bar1.Update();
		Slider1.Update();
		Check.Update();
		//ProcUI
		
		Bar1.SetProgress(Slider1.GetVal());
		if(Button.CheckState(DBOXUI_RELEASED))
			if(Check.IsChecked())
			{break;}
		Engine3D->EndScene();
	}

	Engine3D->Release();
	return 0;
}